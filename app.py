from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
import streamlit as st
import numpy as np
import pandas as pd
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.feature_selection import SelectFromModel
from sklearn.model_selection import train_test_split,cross_validate
import joblib

st.title("Malware Classification")
data = pd.read_csv("train_set_label.csv",header=0)
df = data.drop(["e_magic","e_crlc","e_res","e_res2"],axis=1)
labels = df["class"].values
#best features 
x = df[['e_lfanew', 'NumberOfSections', 'CreationYear', 'Characteristics',
       'MajorLinkerVersion', 'SizeOfCode', 'BaseOfData',
       'ImageBase', 'MajorOperatingSystemVersion', 'MajorSubsystemVersion',
       'SizeOfImage', 'SizeOfHeaders', 'CheckSum', 'Subsystem',
       'SizeOfStackReserve']]

model = joblib.load("model_malware_detect_ml")

xmin = np.min(x,axis=0)#min values in the datasets
xmax = np.max(x,axis=0)#max values in the datasets
e_lfanew = st.number_input('e_lfanew',min_value=xmin[0],max_value=xmax[0],value=20,step=1)
NumberOfSections = st.number_input('NumberOfSections',min_value=xmin[1],max_value=xmax[1],value=5,step=1)
CreationYear = st.number_input('CreationYear',min_value=xmin[2],max_value=xmax[2],value=1980,step=1)
Characteristics = st.number_input('Characteristics',min_value=xmin[3],max_value=xmax[3],value=50,step=1)
MajorLinkerVersion = st.number_input('MajorLinkerVersion',min_value=xmin[4],max_value=xmax[4],value=5,step=1)
SizeOfCode = st.number_input('SizeOfCode',min_value=xmin[5],max_value=xmax[5],value=50,step=1)
#AddressOfEntryPoint = st.number_input('AddressOfEntryPoint',min_value=xmin[6],max_value=xmax[6],value=50,step=1)
BaseOfData = st.number_input('BaseOfData',min_value=xmin[6],max_value=xmax[6],value=50,step=1)
ImageBase = st.number_input('ImageBase',min_value=xmin[7],max_value=xmax[7],value=50,step=1)
MajorOperatingSystemVersion = st.number_input('MajorOperatingSystemVersion',min_value=xmin[8],max_value=xmax[8],value=5,step=1)
MajorSubsystemVersion= st.number_input('MajorSubsystemVersion',min_value=xmin[9],max_value=xmax[9],value=5,step=1)
SizeOfImage= st.number_input('SizeOfImage',min_value=xmin[10],max_value=xmax[10],value=50,step=1)
SizeOfHeaders= st.number_input('SizeOfHeaders',min_value=xmin[11],max_value=xmax[11],value=50,step=1)
CheckSum = st.number_input('CheckSum',min_value=xmin[12],max_value=xmax[12],value=5,step=1)
Subsystem = st.number_input('Subsystem',min_value=xmin[13],max_value=xmax[13],value=8,step=1)  
SizeOfStackReserve = st.number_input('SizeOfStackReserve',min_value=xmin[14],max_value=xmax[14],value=50,step=1)                             
#PointerToSymbolTable = st.number_input('PointerToSymbolTable',min_value=xmin[3],max_value=xmax[3],value=50,step=1)
#NumberOfSymbols = st.number_input('NumberOfSymbols',min_value=xmin[4],max_value=xmax[4],value=50,step=1)


#MinorLinkerVersion = st.number_input('MinorLinkerVersion',min_value=xmin[7],max_value=xmax[7],value=50,step=1)

#SectionAlignment = st.number_input('SectionAlignment',min_value=xmin[9],max_value=xmax[9],value=50,step=1)
#FileAlignment = st.number_input('FileAlignment',min_value=xmin[10],max_value=xmax[10],value=50,step=1)

#MinorOperatingSystemVersion = st.number_input('MinorOperatingSystemVersion',min_value=xmin[12],max_value=xmax[12],value=50,step=1)
#MajorImageVersion= st.number_input('MajorImageVersion',min_value=xmin[13],max_value=xmax[13],value=50,step=1)
#MinorImageVersion= st.number_input('MinorImageVersion',min_value=xmin[14],max_value=xmax[14],value=50,step=1)

#MinorSubsystemVersion= st.number_input('MinorSubsystemVersion',min_value=xmin[16],max_value=xmax[16],value=50,step=1)

#DllCharacteristics = st.number_input('DllCharacteristics',min_value=xmin[20],max_value=xmax[20],value=50,step=1)

#SizeOfStackCommit= st.number_input('SizeOfStackCommit',min_value=xmin[22],max_value=xmax[22],value=50,step=1)

#SizeOfHeapCommit= st.number_input('SizeOfStackReserve',min_value=xmin[24],max_value=xmax[24],value=50,step=1)
#LoaderFlags = st.number_input('LoaderFlags',min_value=xmin[25],max_value=xmax[25],value=50,step=1)

#MinorImageVersion= st.slider('MinorImageVersion',float(xmin[4]),float(xmax[4]))
y_pred = model.predict([[e_lfanew, NumberOfSections,CreationYear,Characteristics,
       MajorLinkerVersion, SizeOfCode, BaseOfData,
       ImageBase, MajorOperatingSystemVersion, MajorSubsystemVersion,
       SizeOfImage, SizeOfHeaders, CheckSum, Subsystem,
       SizeOfStackReserve]])
op = ["No Malware Detected","Malware Detected"]
st.title(op[y_pred[0]])
